plot(b,res[,1],type = "l")
plot(b,RES[,1],type = "l")
plot(b,RES[,1],type = "l",log = "x")
lines(b,RES[,4])
plot(b,RES[,1],type = "l",log = "x",ylim = c(0,1))
lines(b,RES[,4])
dev.new(width = 4, height = 3.5)#
par(mar = c(5,6,2,1))	#
 plot(b,RES[,1],type = "l",log = "x",ylim = c(0,1),cex.lab = 1.25,cex.axis = 1.25,xlab = "Hetero sp.-replacement", ylab = "Occupancy")#
 lines(b,RES[,4])
dev.new(width = 5, height = 3.5)#
par(mar = c(5,6,2,1))	#
 plot(b,RES[,1],type = "l",log = "x",ylim = c(0,1),cex.lab = 1.25,cex.axis = 1.25,xlab = "Hetero sp.-replacement", ylab = "Occupancy")#
 lines(b,RES[,4])
Complexity-stability relationship in random ecosystems#
###################################################################
###################################################################
#
eig_J = function(S, C=0.05, a = 1) {#
#
	# Draw random interaction coefficients#
	J = matrix(rnorm(S^2,0,a),nr=S,nc=S)#
#
    # Keep only a fraction C of the links#
    rand = matrix(runif(S^2,0,1),nr=S,nc=S) #
    J[rand>C] = 0 #
    # Set density-dependence along the diagonal#
    diag(J) = -a#
    # Get the largest eigen value#
    return(max(as.real(eigen(J)$values)))#
	}#
#
# Effect of diversity on stability, loop from 10 to 100 species#
S = rep(c(10:100),25)#
#
# Apply the function eig_J for all values of S#
res = as.numeric(lapply(S,eig_J))#
#
# Compute the average eigeinvalue across the 25 replicates for each diversity#
res_avg = tapply(res,INDEX=S,FUN=mean)#
#
# Illustrate the results#
dev.new()#
par(mar=c(5,6,2,1))#
plot(c(10:100),res_avg, xlab = "Species richness", ylab = "Largest eigenvalue", cex.lab = 1.5, cex.axis = 1.25)#
abline (h = 0)
plot(c(10:100),res_avg, xlab = "Species richness", ylab = "Largest eigenvalue", cex.lab = 1.5, cex.axis = 1.25)
plot(c(10:100),res_avg, xlab = "Species richness", ylab = "Largest eigenvalue", cex.lab = 1.5, cex.axis = 1.25,cex=2)
abline (h = 0)
plot(c(10:100),res_avg, xlab = "Species richness", ylab = "Largest eigenvalue", cex.lab = 1.5, cex.axis = 1.25,cex=2,pch=19)
abline (h = 0)
X1 = rnorm(1000,10,1)#
X2 = rnomr(1000,10,1)
X2 = rnorm(1000,10,1)
ES = log(X1/X2)
X1 = rnorm(1000,10,1)
X2 = rnorm(1000,10,1)
log(X1/X2)
mean(log(X1/X2))
log(mean(X1)/mean(X2))
log(mean(X1/X2))
X1 = rnorm(1000,10,1)#
X2 = rnorm(1000,10,1)#
#
mean(log(X1/X2))#
log(mean(X1)/mean(X2))#
log(mean(X1/X2))
163/2.2
(163/2.2/1.76)^2
74/1.76
74/176
74/1.76^2
832+350+127+2442
2442/40
3*3*2*0.52
S = seq(2,100,1)#
temp = S/(S-1)#
plot(S,temp)
S = seq(2,100,1)#
A = 100#
B = 1#
#
res = S*A/(A*(S-1) + B)#
#
plot(S, res, type = "l")
S = seq(2,100,1)#
A = 1#
B = 100#
#
res = S*A/(A*(S-1) + B)#
#
plot(S, res, type = "l")
S = seq(2,100,1)#
A = 10#
B = 10#
#
res = S*A/(A*(S-1) + B)#
#
plot(S, res, type = "l")
S = seq(2,100,1)#
A = 10#
B = 9#
#
res = S*A/(A*(S-1) + B)#
#
plot(S, res, type = "l")
362.75*329.18
362.75*329.18/10000
50/8
2500/8
2500/8/6
6*55
45*6
% On illustre les résultats#
eq = 0.1#
aC = seq(0.101, 1,0.001)#
bD = 0#
bC = 0#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
#
plot(aC,aD_D,type = "l")#
lines(aC,aD_C)
# On illustre les résultats#
e = 0.1#
aC = seq(0.101, 1,0.001)#
bD = 0#
bC = 0#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
#
plot(aC,aD_D,type = "l")#
lines(aC,aD_C)#
#
bD = 0.1#
bC = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
lines(aC,aD_C,col = "darkred")#
lines(aC,aD_D,col = "darkred")
# On illustre les résultats#
e = 0.1#
aC = seq(0.101, 1,0.001)#
bD = 0#
bC = 0#
sC = 0.1#
sD = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
#
plot(aC,aD_D,type = "l")#
lines(aC,aD_C)#
#
bD = 0.1#
bC = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
lines(aC,aD_C,col = "darkred")#
lines(aC,aD_D,col = "darkred")
range(aD_D)
range(aD_C)
plot(aC,aD_D,type = "l")
plot(aC,aD_C,type = "l")
plot(aC,aD_C,type = "l",ylim = c(0,10))
lines(aC,aD_D)
plot(aC,aD_C,type = "l",ylim = c(0.01,10),log = "y")
lines(aC,aD_D)
plot(aC,aD_C,type = "l",ylim = c(0.01,10),log = "xy")
# On illustre les résultats#
e = 0.1#
aC = seq(0.101, 10,0.001)#
bD = 0#
bC = 0#
sC = 0.1#
sD = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)
plot(aC,aD_D,type = "l",ylim = c(0.01,10),xlim = c(0.01,10))#
lines(aC,aD_C)
# On illustre les résultats#
e = 0.1#
aC = seq(0.101, 10,0.001)#
bD = 0#
bC = 0#
sC = 0.1#
sD = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)
plot(aC,aD_D,type = "l",ylim = c(0.01,10),xlim = c(0.01,10))#
lines(aC,aD_C)
plot(aC,aD_D,type = "l",ylim = c(0.01,10),xlim = c(0.01,10),log = "xy")#
lines(aC,aD_C)
bD = 0.1#
bC = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
lines(aC,aD_C,col = "darkred")#
lines(aC,aD_D,col = "darkred")
# On illustre les résultats#
e = 0.1#
aC = seq(0.101, 10,0.001)#
bD = 0#
bC = 0#
sC = 0.1#
sD = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
#
plot(aC,aD_D,type = "l",ylim = c(0.1,10),xlim = c(0.1,10),log = "xy")#
lines(aC,aD_C)#
#
bD = 0.1#
bC = 0.1#
aD_D = 2*e + sC - bD*(1-e/aC)#
aD_C = bC*e/(aC - 2*e - sC + bC)#
lines(aC,aD_C,col = "darkred")#
lines(aC,aD_D,col = "darkred")
abline(v = 2*e+sD)
abline(h = 0.1)
plot(aC,aD_D,type = "l",ylim = c(0.01,10),xlim = c(0.01,10),log = "xy")#
lines(aC,aD_C)#
abline(h = e)#
abline(v = e)#
abline(v = 2*e + sD,col = "darkred")#
abline(h = 2*e+sC,col = "darkred")
plot(aC,aD_D,type = "l",ylim = c(0.01,10),xlim = c(0.01,10),log = "xy")#
lines(aC,aD_C)#
abline(h = e,lty = 3)#
abline(v = e, lty = 3)#
abline(v = 2*e + sD,col = "darkred")#
abline(h = 2*e+sC,col = "darkred")
quartz(height = 5, width = 6)#
par(mar = c(5,6,1,1))#
plot(aC,aD_D,type = "l",ylim = c(0.01,10),xlim = c(0.01,10),log = "xy")#
lines(aC,aD_C)#
abline(h = e,lty = 3)#
abline(v = e, lty = 3)#
abline(v = 2*e + sD,col = "darkred")#
abline(h = 2*e+sC,col = "darkred")
quartz(height = 5, width = 6)#
par(mar = c(5,6,1,1))#
plot(aC,aD_D,type = "l",ylim = c(0.05,10),xlim = c(0.05,10),log = "xy")#
lines(aC,aD_C)#
abline(h = e,lty = 3)#
abline(v = e, lty = 3)#
abline(v = 2*e + sD,col = "darkred")#
abline(h = 2*e+sC,col = "darkred")
#######################
# The model#
model = function(Mprey,Mpred,meanMprey,sdMprey,a0,a1,a2,a3,b0,b1,h,Temp) {#
#
	# Optimum and range#
	o = a0 + a1*Mpred #
	o = a0 +(a1 + a2*Temp)*Mpred + a3*Temp #
#	r = b0#
	r = b0 + b1*Mpred#
	# Compute the conditional#
	pLM = h*exp(-(o-Mprey)^2/2/r^2)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey,mean=meanMprey,sd=sdMprey)#
	#  Integrate the denominator#
	pL = r/(r^2+sdMprey^2)^0.5*h*exp(-(o-meanMprey)^2/2/(r^2+sdMprey^2))	#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
# PDF#
PDF = function(pML) log(pML)#
#
#######################
# Source packages#
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
source("predicted_results.R")#
#
# Load data#
original_data = read.csv2("marinesize.csv",dec=".")#
Mpred = log10(original_data$predator_mass)#
Mprey = log10(original_data$prey_mass)#
Temp = original_data$mean_annual_temp#
data = data.frame(Mprey=Mprey,Mpred=Mpred, Temp=Temp)#
#
# Initial values #
lm_M = lm(Mprey~Mpred)#
par = list()#
par$a0 = lm_M$coefficients[1]#
par$a1 = lm_M$coefficients[2]#
par$a2 = 0#
par$a3 = 0#
par$b0 = sd(lm_M$residuals)#
par$b1 = 0#
par$h = h#
#
# Boundaries#
par_lo = list(a0 = -100, a1 = 0, a2 = -10, a3 = -10, b0 = 0, b1 = -10, h = 0)#
par_hi = list(a0 = 100, a1 = 10, a2 = 10, a3 = 10, b0 = 100, b1 = 10, h = 1)#
#
# Stuff for the anneal function#
var = list()#
var$Mprey = "Mprey"#
var$Mpred = "Mpred" #
var$pML = "predicted" #
var$Temp = "Temp"#
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
# Maximum likelihood estimation#
test = anneal(model = model, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "Mprey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)#
#
# Plot the results#
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
seqM = seq(min(Mpred),max(Mpred),0.001)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM, col = "darkred",lwd = 2)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM + 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM - 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")#
#
get_opt = function(Mpred, best_pars,Temp) {#
	a0 = best_pars$a0#
	a1 = best_pars$a1#
	a2 = best_pars$a2#
	a3 = best_pars$a3		#
	a0 +(a1 + a2*Temp)*Mpred + a3*Temp #
}#
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(seqM,get_opt(seqM,test$best_pars,Temp= 15), col = "darkblue", type = "l",cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 30), col = "darkred")
#######################
# Source packages#
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
source("predicted_results.R")#
#
# Load data#
original_data = read.csv2("marinesize.csv",dec=".")#
Mpred = log10(original_data$predator_mass)#
Mprey = log10(original_data$prey_mass)#
Temp = original_data$mean_annual_temp#
data = data.frame(Mprey=Mprey,Mpred=Mpred, Temp=Temp)
names(original_data)
dim(original_data)
original_data[1:5,1:10]
M = unique(c(Mprey,Mpred))
length(M)
#######################
# The model#
model = function(Mprey,Mpred,meanMprey,sdMprey,a0,a1,a2,a3,b0,b1,h,Temp) {#
#
	# Optimum and range#
	o = a0 + a1*Mpred #
	o = a0 +(a1 + a2*Temp)*Mpred + a3*Temp #
#	r = b0#
	r = b0 + b1*Mpred#
	# Compute the conditional#
	pLM = h*exp(-(o-Mprey)^2/2/r^2)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey,mean=meanMprey,sd=sdMprey)#
	#  Integrate the denominator#
	pL = r/(r^2+sdMprey^2)^0.5*h*exp(-(o-meanMprey)^2/2/(r^2+sdMprey^2))	#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
# PDF#
PDF = function(pML) log(pML)#
#
#######################
# Source packages#
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
source("predicted_results.R")#
#
# Load data#
original_data = read.csv2("marinesize.csv",dec=".")#
Mpred = log10(original_data$predator_mass)#
Mprey = log10(original_data$prey_mass)#
Temp = original_data$mean_annual_temp#
data = data.frame(Mprey=Mprey,Mpred=Mpred, Temp=Temp)#
#
# Initial values #
lm_M = lm(Mprey~Mpred)#
par = list()#
par$a0 = lm_M$coefficients[1]#
par$a1 = lm_M$coefficients[2]#
par$a2 = 0#
par$a3 = 0#
par$b0 = sd(lm_M$residuals)#
par$b1 = 0#
par$h = 1#
#
# Boundaries#
par_lo = list(a0 = -100, a1 = 0, a2 = -10, a3 = -10, b0 = 0, b1 = -10, h = 0)#
par_hi = list(a0 = 100, a1 = 10, a2 = 10, a3 = 10, b0 = 100, b1 = 10, h = 1)#
#
# Stuff for the anneal function#
var = list()#
var$Mprey = "Mprey"#
var$Mpred = "Mpred" #
var$pML = "predicted" #
var$Temp = "Temp"#
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
# Maximum likelihood estimation#
test = anneal(model = model, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "Mprey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
dim(M)
var$meanMprey = mean(Mprey)
var$sdMprey = sd(Mprey)
# Maximum likelihood estimation#
test = anneal(model = model, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "Mprey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
write.table(test$best_pars,file = "best_pars.txt")
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
seqM = seq(min(Mpred),max(Mpred),0.001)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM, col = "darkred",lwd = 2)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM + 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM - 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")
abline(test$best_pars$a0,test$best_pars$a1, col = "darkred",lwd = 2)
abline(test$best_pars$a0,test$best_pars$a1 + 3*(test$best_pars$b0+test$best_pars$b1, col = "gray",lwd = 2)
abline(test$best_pars$a0,test$best_pars$a1 + 3*(test$best_pars$b0+test$best_pars$b1), col = "gray",lwd = 2)
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
seqM = seq(min(Mpred),max(Mpred),0.001)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM, col = "darkred",lwd = 2)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM + 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM - 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")
dev.copy2eps(file = "PredPreyFit.pdf")
#######################
get_opt = function(Mpred, best_pars,Temp) {#
	a0 = best_pars$a0#
	a1 = best_pars$a1#
	a2 = best_pars$a2#
	a3 = best_pars$a3		#
	a0 +(a1 + a2*Temp)*Mpred + a3*Temp #
}#
#
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(seqM,get_opt(seqM,test$best_pars,Temp= 15), col = "darkblue", type = "l",cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 30), col = "darkred")
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")
lines(seqM,get_opt(seqM,test$best_pars,Temp= 15), col = "darkblue")
lines(seqM,get_opt(seqM,test$best_pars,Temp= 30), col = "darkred")
lines(seqM,get_opt(seqM,test$best_pars,Temp= 15), col = "darkblue", lwd = 2)
lines(seqM,get_opt(seqM,test$best_pars,Temp= 30), col = "darkred", lwd = 2)
legend("topleft",lty = 1, col = c("darkred","darkblue"), legend = c("T = 30", "T = 15"), lwd = 2, bty = "n")
dev.copy2eps(file = "PredPreyTemp.pdf")
pL_fitted = function(Mprey,Mpred,a0,a1,b0,b1,h, Temp) {#
	# Optimum and range#
	o = a0 +(a1 + a2*Temp)*Mpred + a3*Temp #
	r = b0 + b1*Mpred #
	# Compute the conditional#
	pLM = h*exp(-(o-Mprey)^2/2/r^2)#
}#
#
# Pair all potential species#
a0 = test$best_pars$a0#
a1 = test$best_pars$a1#
a2 = test$best_pars$a2#
a3 = test$best_pars$a3#
b0 = test$best_pars$b0#
b1 = test$best_pars$b1#
h = test$best_pars$h
a0
a1
a2
a3
b0
b1
h
# Pair all potential species#
a0 = test$best_pars$a0#
a1 = test$best_pars$a1#
a2 = test$best_pars$a2#
a3 = test$best_pars$a3#
b0 = test$best_pars$b0#
b1 = test$best_pars$b1#
h = test$best_pars$h#
#
ID = unique(c(original_data$,original_data$))#
M = unique(c(original_data$,original_data$))#
#
preyID = apply(ID,2,rep,time = S)#
predID = apply(ID,2,rep,each = S)#
#
Mprey= rep(M, time = length(M))#
Mpred = rep(M, each = length(M))
names(original_data)
original_id[1:5,3]
original_data[1:5,3]
original_data[1:5,4]
ID = unique(c(original_data$predator,original_data$prey))
M = log10(unique(c(original_data$predator_mass,original_data$prey_mass)))
length(ID)
length(M)
unique(original_data$predator)
unique(original_data$prey)
c(original_data$predator,original_data$prey)
IDprey = unique(original_data$prey)
IDpred = unique(original_data$predator)
IDprey
IDpred
length(Mprey)
dim(original_data)
pL_fitted = function(Mprey,Mpred,a0,a1,b0,b1,h, Temp) {#
	# Optimum and range#
	o = a0 +(a1 + a2*Temp)*Mpred + a3*Temp #
	r = b0 + b1*Mpred #
	# Compute the conditional#
	pLM = h*exp(-(o-Mprey)^2/2/r^2)#
}#
#
# Pair all potential species#
a0 = test$best_pars$a0#
a1 = test$best_pars$a1#
a2 = test$best_pars$a2#
a3 = test$best_pars$a3#
b0 = test$best_pars$b0#
b1 = test$best_pars$b1#
h = test$best_pars$h#
#
IDprey = unique(original_data$prey)#
IDpred = unique(original_data$predator)#
M = log10(unique(c(original_data$predator_mass,original_data$prey_mass)))
IDPrey
IDprey
22*30
c(IDprey,IDpred)
rbind(IDprey,IDpred)
IDprey
c(as.factor(IDprey),as.factor(IDpred))
IDprey
cbind(IDprey,ID_pred)
cbind(IDprey,IDpred)
IDprey
c(original_data_$prey,original_data$predator)
c(original_data$prey,original_data$predator)
IDprey
unique(IDprey,IDpred)
?tapply
tapply(original_data$prey_mass,original_data$prey,mean)
t1 = tapply(original_data$prey_mass,original_data$prey,mean)
t1
t2 = tapply(original_data$predator_mass,original_data$pred,mean)
t2 = tapply(original_data$predator_mass,original_data$predator,mean)
t1
t2
c(t1,t2)
length(c(t1,t2))
res =length(c(t1,t2))
unique(res)
IDprey = log10(tapply(original_data$prey_mass,original_data$prey,mean))
IDpred = log10(tapply(original_data$predator_mass,original_data$predator,mean))
M = c(IDprey,IDpred)
names(M)
IDprey = log10(tapply(original_data$prey_mass,original_data$prey,mean))#
IDpred = log10(tapply(original_data$predator_mass,original_data$predator,mean))#
M = c(IDprey,IDpred)#
sp_names = names(M)#
#
Mprey= rep(M, time = length(M))#
Mpred = rep(M, each = length(M))
pL25 = pL_fitted(M,M,a0,a1,a2,a3,b0,b1,h,Temp = 25)
pL_fitted = function(Mprey,Mpred,a0,a1,a2,a3,b0,b1,h, Temp) {#
	# Optimum and range#
	o = a0 +(a1 + a2*Temp)*Mpred + a3*Temp #
	r = b0 + b1*Mpred #
	# Compute the conditional#
	pLM = h*exp(-(o-Mprey)^2/2/r^2)#
}
pL25 = pL_fitted(M,M,a0,a1,a2,a3,b0,b1,h,Temp = 25)
pL10 = pL_fitted(M,M,a0,a1,a2,a3,b0,b1,h,Temp = 10)
hist(pL25)
hist(pL10)
hist(pL25)
L25 = numeric(length(pL25))
L25[pL25 > 0.15] = 1
sum(L25)
L25[pL25 > 0.1] = 1
sum(L25)
length(L25)
pL25 = pL_fitted(Mprey,Mpred,a0,a1,a2,a3,b0,b1,h,Temp = 25)
pL10 = pL_fitted(Mprey,Mpred,a0,a1,a2,a3,b0,b1,h,Temp = 10)
length(pL25)
hist(pL25)
L25 = numeric(length(pL25))
L25[pL25 > 0.8] = 1
S = length(M)
sum(L25)/S^2
L10 = numeric(length(pL10))
L10[pL10 > 0.8] = 1
hist(pL10)
L25 = numeric(length(pL25))#
L25[pL25 > 0.6] = 1#
sum(L25)/S^2#
#
L10 = numeric(length(pL10))#
L10[pL10 > 0.6] = 1#
sum(L10)/S^2
Mprey[1:10]
pairs25 = cbind(names(Mprey),names(Mpred))[L25==1]
dim(pairs25)
pairs25
pairs25 = cbind(names(Mprey),names(Mpred))[L25==1,]
dim(pairs25)
sum(L25)
write.table(pairs25, file = "pairs25.txt")
write.table(pairs10, file = "pairs10.txt")
pairs10 = cbind(names(Mprey),names(Mpred))[L10==1,]
write.table(pairs10, file = "pairs10.txt")
size = read.csv("L_sp.csv")
names(size)
size = read.csv2("L_sp.csv")
names(size)
range(size$Max_length)
size$Maxlength
size$Max_length
range(size$Max_length,na.rm=TRUE)
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 15), col = "darkblue", lwd = 2)#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 30), col = "darkred", lwd = 2)#
legend("topleft",lty = 1, col = c("darkred","darkblue"), legend = c("T = 30", "T = 15"), lwd = 2, bty = "n")
# Load data#
original_data = read.csv2("marinesize.csv",dec=".")#
Mpred = log10(original_data$predator_mass)#
Mprey = log10(original_data$prey_mass)#
Temp = original_data$mean_annual_temp#
data = data.frame(Mprey=Mprey,Mpred=Mpred, Temp=Temp)
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 15), col = "darkblue", lwd = 2)#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 30), col = "darkred", lwd = 2)#
legend("topleft",lty = 1, col = c("darkred","darkblue"), legend = c("T = 30", "T = 15"), lwd = 2, bty = "n")
# Plot the results#
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
seqM = seq(min(Mpred),max(Mpred),0.001)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM, col = "darkred",lwd = 2)#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM + 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")#
lines(seqM, test$best_pars$a0 + test$best_pars$a1*seqM - 3*(test$best_pars$b0+test$best_pars$b1*seqM), col = "gray")
quartz(height = 6, width = 7)#
par(mar=c(6,6,2,1))	#
plot(Mpred,Mprey,pch=21,cex.axis = 1.25, cex.lab = 1.5, xlab = "Predator size", ylab = "Prey size")#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 15), col = "darkblue", lwd = 2)#
lines(seqM,get_opt(seqM,test$best_pars,Temp= 30), col = "darkred", lwd = 2)#
legend("topleft",lty = 1, col = c("darkred","darkblue"), legend = c("T = 30", "T = 15"), lwd = 2, bty = "n")
a0
a1
a2
a3
(a1 + a2*30)
(a1 + a2*10)
pL_fn = function(o, meanMprey) 	r/(r^2+sdMprey^2)^0.5*h*exp(-(o-meanMprey)^2/2/(r^2+sdMprey^2))#
M = seq(1, 200, 1)#
#
plot(M, pL_fn(M, meanMprey = 50), type = "l")
b0
b1
meanMprey
sd(lm_M$residuals)
r = 1.5#
pL_fn = function(o, meanMprey) 	r/(r^2+sdMprey^2)^0.5*h*exp(-(o-meanMprey)^2/2/(r^2+sdMprey^2))#
M = seq(1, 200, 1)#
#
plot(M, pL_fn(M, meanMprey = 50), type = "l")
sdMprey = sd(Mprey)
plot(M, pL_fn(M, meanMprey = 50), type = "l")
plot(M, pL_fn(M, meanMprey = 10), type = "l")
plot(M, pL_fn(M, meanMprey = 1), type = "l")
plot(M, pL_fn(M, meanMprey = 10), type = "l")
plot(M, pL_fn(M, meanMprey = 50), type = "l")
r
r = 10
plot(M, pL_fn(M, meanMprey = 50), type = "l")
r = 25
r = 25
plot(M, pL_fn(M, meanMprey = 50), type = "l")
plot(M, pL_fn(M, meanMprey = 20), type = "l")
plot(M, pL_fn(M, meanMprey = 10), type = "l")
plot(M, pL_fn(M, meanMprey = 1), type = "l")
plot(M, pL_fn(M*.5, meanMprey = 1), type = "l")
plot(M, pL_fn(M*.5, meanMprey = 10), type = "l")
plot(M, pL_fn(M*.5, meanMprey = 50), type = "l")
plot(M, pL_fn(M*.5, meanMprey = 100), type = "l")
r = 1 + 0.1*M
plot(M, pL_fn(M*.5, meanMprey = 100), type = "l")
plot(M, pL_fn(M*.5, meanMprey = 50), type = "l")
getwd()
setwd("/Users/DGravel/")
system("ls")
system("gcc")
##################################################################
#
dat = read.table("data_BA.txt",header = TRUE, sep = ";")#
#
## Rm all disturbed plots#
dat  <- dat[is.na(dat$disturbance),]#
#
## Order plot#
dat  <- dat[order(dat$id_plot,dat$yr),]#
#
## Rm all NA in cover type (R,M,F)#
dat  <- dat[complete.cases(dat$cover_type),]#
#
## Rm all plots with no climatic data associated#
dat  <- dat[which(!is.na(dat$annual_pp)),]#
#
## Conserve all plots with drainage 20,30,40#
dat$drainage  <- as.numeric(dat$drainage)#
test  = numeric(nrow(dat))#
test[dat$drainage >= 20 & dat$drainage <= 41] = 1#
dat = dat[test==1,]#
#
### Get BA in hectares#
dat[,7:62] <- dat[,7:62]*10000/400#
#
## Rm plots with only one measurement#
N  <- rowSums(table(dat$id_plot,dat$id_mes))#
N  <- names(N[N==1])#
dat  <- dat[!dat$id_plot %in% N,]
# List of interests species#
T_sp  <- c("boj","bop","chr","peb","peg","pet","pib","pir","prp","sal","soa")#
C_sp  <- c("epn","epb","epr","mel","pig","pru","sab","tho")#
D_sp  <- c("err","ers","fra","frn","heg","osv","til","cet")#
#
# Subset species BA and cover type observed#
class_dat  <- dat[,c(7:62,65)]#
class_dat$sum_tot <- rowSums(dat[,7:62],na.rm=TRUE) #
#
class_dat$T_prop  <- rowSums(dat[which(names(dat) %in% T_sp)],na.rm=T)/class_dat$sum_tot#
class_dat$C_prop  <- rowSums(dat[which(names(dat) %in% C_sp)],na.rm=T)/class_dat$sum_tot#
class_dat$D_prop  <- rowSums(dat[which(names(dat) %in% D_sp)],na.rm=T)/class_dat$sum_tot#
#
# Subset proportion by species class#
class_dat  <- class_dat[,57:61]#
#
# Class into state types#
#
class_fn = function(x) { #
  classPlot  <- NULL#
  if(min(complete.cases(x))==1) {#
  if(sum(x[1:3]) < 1/3) {classPlot="Unclass"} 	#
  else if(x[1] > 2/3) {classPlot="T"}#
  else if(x[2] > 2/3) {classPlot="C"}#
  else if(x[3] > 2/3) {classPlot="D"}#
  else {classPlot="M"}#
  } else {classPlot="Unclass"}#
return(classPlot)#
}#
#
class_final  <- as.vector(apply(class_dat[,3:5],1,class_fn))
class_final
table(class_final)
class_fn = function(x) { #
  classPlot  <- NULL#
  if(min(complete.cases(x))==1) {#
  if(sum(x[1:3]) < 1/3) {classPlot="Unclass"} 	#
  else if(x[1] > 1/2) {classPlot="T"}#
  else if(x[2] > 1/2) {classPlot="C"}#
  else if(x[3] > 1/2) {classPlot="D"}#
  else {classPlot="M"}#
  } else {classPlot="Unclass"}#
return(classPlot)#
}#
#
class_final  <- as.vector(apply(class_dat[,3:5],1,class_fn))
table(class_final)
# Rename columns#
class_dat  <- cbind(class_dat,class_final)#
names(class_dat)[c(1,6)]  <- c("obs","pred")#
#
# Format factors levels#
class_dat$obs  <- as.factor(class_dat$obs) #
class_dat$obs  <- factor(class_dat$obs,levels=c(levels(class_dat$obs)[3],levels(class_dat$obs)[1],levels(class_dat$obs)[2],"T","Unclass"),labels=c("C","D","M","T","Unclass"))#
#
####################################################################
#####               Reshape and export data                 ########
####################################################################
#
## Function to match remeasurements on the same line #
prwise  <- function(x,clim=FALSE){#
  if (clim == FALSE){#
    if (class(x)=='numeric') df  <-  data.frame(col1=numeric(length(x)-1),col2=numeric(length(x)-1))#
    if (class(x)=='character') df  <-  data.frame(col1=character(length(x)-1),col2=character(length(x)-1),stringsAsFactors=FALSE)#
    colnames(df)  <- c("t0","t1")#
    for(i in 1:dim(df)[1]){#
      df[i,1]  <-  x[i]#
      df[i,2]  <- x[i+1]#
    }#
  }#
  if (clim == TRUE){#
    df  <- numeric(length(x)-1)#
    for(i in 2:length(x)){#
      df[i-1]  <-  mean(c(x[i-1],x[i]))#
    }#
  }#
  return(df)#
}#
#
# Subset only columns needed and remove unclass plots#
res_dat  <- cbind(dat[,c(2:4,68:71)],pred_class=class_dat$pred)#
res_dat$pred_class  <- as.character(res_dat$pred_class,stringsAsFactors=FALSE)#
#
## Split by id_plot#
res_dat  <- split(res_dat,res_dat$id_plot)#
#
## Pair#
pair <- function(x) { res  <- cbind(id_plot=x[-1,1],#
                                av_annual_pp=prwise(x[,4],clim=TRUE),#
                                av_annual_mean_tp=prwise(x[,5],clim=TRUE),#
                                av_annual_min_tp=prwise(x[,6],clim=TRUE),#
                                av_annual_max_tp=prwise(x[,7],clim=TRUE),#
                                int=diff(x[,2]),#
                                prwise(x[,8],clim=FALSE))#
                      return(res)#
                     }#
#
## Transpose states and compute mean#
reshape_dat <- lapply(res_dat,pair)#
#
## Final reshaping and export#
reshape_dat  <- do.call(rbind,reshape_dat)#
reshape_dat  <- data.frame(reshape_dat,row.names=NULL)#
table(reshape_dat$t0)#
#
reshape_dat = reshape_dat[reshape_dat$t0 != "Unclass" & reshape_dat$t1 != "Unclass",]#
write.table(reshape_dat,file="data_categorical.txt")
