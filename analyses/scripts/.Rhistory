e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + 2*K^2*a*e1*p^2 - 2*K^2*a*e1*p^3 - 2*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p
^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27
*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*
p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2
*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)))^2 - K*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2
- 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*(
(((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a
*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e1*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p
^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 +
10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p
^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*
p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e2*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2
*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e
1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a
*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))))/(K^2*a^2*e1*p^2*(p - 1))#
#
par(mar=c(5,6,2,1))#
plot(1-p,eqF,type="l",xlab = "Relative carrying capacity of prey species 1", ylab = "Equilibrium predator density", cex.lab = 1.5, cex.axis = 1.25,lwd = 1.5)
m = 0.1#
a1 = 0.15#
a2 = 0.15#
K = 1#
p = seq(0.4,0.5,0.001)#
e1 = 0.2#
e2 = 0.2#
eqF = -(m*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(
6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2
*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 -
K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + a*e2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*
e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*
a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*
a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m -
6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)))^2 - 2*K*m*p + 2*K*m*p^2 - 2*m*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p
*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m -
2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*
e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + 2*K^2*a*e1*p^2 - 2*K^2*a*e1*p^3 - 2*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p
^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27
*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*
p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2
*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)))^2 - K*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2
- 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*(
(((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a
*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e1*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p
^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 +
10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p
^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*
p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e2*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2
*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e
1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a
*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))))/(K^2*a^2*e1*p^2*(p - 1))#
#
par(mar=c(5,6,2,1))#
plot(1-p,eqF,type="l",xlab = "Relative carrying capacity of prey species 1", ylab = "Equilibrium predator density", cex.lab = 1.5, cex.axis = 1.25,lwd = 1.5)
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
plot(1-p,eqF,type="l",xlab = "Relative carrying capacity of prey species 1", ylab = "Equilibrium predator density", cex.lab = 1.5, cex.axis = 1.25,lwd = 1.5)
2/a - (4*m)/(K*a^2*(e1 + e2))
(2*(e1 + e2 - 4*m))/(e1 + e2)
m
m = 0.1
(2*(e1 + e2 - 4*m))/(e1 + e2)
m = 0.2
(2*(e1 + e2 - 4*m))/(e1 + e2)
m = 0.01
(2*(e1 + e2 - 4*m))/(e1 + e2)
m = 0.1#
a1 = 0.15#
a2 = 0.15#
K = 1#
p = seq(0.4,0.5,0.001)#
e1 = 0.2#
e2 = 0.2#
eqF = -(m*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(
6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2
*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 -
K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + a*e2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*
e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*
a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*
a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m -
6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)))^2 - 2*K*m*p + 2*K*m*p^2 - 2*m*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p
*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m -
2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*
e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + 2*K^2*a*e1*p^2 - 2*K^2*a*e1*p^3 - 2*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p
^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27
*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*
p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2
*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)))^2 - K*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2
- 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*(
(((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a
*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e1*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p
^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 +
10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p
^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*
p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e2*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2
*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e
1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a
*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))))/(K^2*a^2*e1*p^2*(p - 1))#
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
plot(1-p,eqF,type="l",xlab = "Relative carrying capacity of prey species 1", ylab = "Equilibrium predator density", cex.lab = 1.5, cex.axis = 1.25,lwd = 1.5)
226+216+198
R = 0.2
M = seq(0,1-R,0.001)
I = 1-R-M
plot(I,I^0.5,type="l")
plot(I,I^2,type="l")
plot(M,M*I^2,type="l")
plot(M,M*I^0.5,type="l")
plot(M,M*I^0.1,type="l")
plot(M,M*I^2,type="l")
plot(M,M*I^5,type="l")
plot(M,M*I^1.2,type="l")
plot(M,M*I^1,type="l")
plot(M,M*I^1*.1,type="l")
plot(M,M*I^1*I,type="l")
plot(M,M*I^2*I,type="l")
plot(M,M*I^0.5*I,type="l")
plot(M,M*I^0.25*I,type="l")
plot(M,M*I,type="l")
plot(M,M*I^0.5,type="l")
plot(M,M*I^0,type="l")
plot(M,M*I^0.1,type="l")
plot(M,M*I^-0.1,type="l")
plot(M,M*I^-0.5,type="l")
plot(M,I^-0.5,type="l")
plot(M,I^0.5,type="l")
plot(M,M*I^0.5,type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.3#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= u + w*R - (b*S*I+rand*S) - u*S#
	dI = (b*S*I+rand*S) - g*I - u*I#
	dR = g*I - w*R - u*R#
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")#
#
lines(res[,1],res[,5],type="l",col = "red", lwd = 0.5)
plot(res[,1],res[,2],type="l")
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.1#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.01)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.1#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,100, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.1#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.5#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0.1#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = 2#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 10#
a3 = 0#
a4 = 0.1#
b = 2#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 10#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = .5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 3.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 5.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.9#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.8#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.7#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.6#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.65#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.65#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = -1#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = -2#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = 0.75#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.4#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.3#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 1#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 10#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.3#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.01#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.05#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.03#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.015#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 6#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 4#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.6#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.4#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*(1-S-I) - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		list(c(dS,dI))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.5
eqI1 = (a1 - (a1*(a1^2*a2 + a1*a4^2 + a1^2*a4 + a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b))/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b)))/(a1 + a4)#
#
eqI2 = (a1 - (a1*(a1^2*a2 + a1*a4^2 + a1^2*a4 - a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) - a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b))/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b)))/(a1 + a4)#
eqS1 = (a1^2*a2 + a1*a4^2 + a1^2*a4 + a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b)/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b))#
eqS2 = (a1^2*a2 + a1*a4^2 + a1^2*a4 - a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) - a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b)/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b))
eqI1
eqI2
eqS1
eqS2
I = seq(0,1,0.01)
plot(I, (1-0.5*I)^-1,type="l")
plot(I, (1-2*I)^-1,type="l")
plot(I, (1-1.25*I)^-1,type="l")
plot(I, (1+0.5*I)^-1,type="l")
plot(I, (1-0.5*I)^-1,type="l")
plot(I, (1-0.95*I)^-1,type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.3#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= u + w*R - (b*S*I+rand*S) - u*S#
	dI = (b*S*I+rand*S) - g*I - u*I#
	dR = g*I - w*R - u*R#
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
plot(res[,1],res[,2],type="l")
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {	#
		dS = a1*(1-S-I) - a2*S*I*I^b - a3*S#
		dI = a2*S*I*I^b + a3*S - a4*I #
		list(c(dS,dI))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
R = 0.1#
I = seq(0,1-R,0.01)#
S = 1-R-S#
#
b = 0.2#
plot(I,S*I^b,type="l")
plot(I,I*I^b,type="l", ylab = "Dispersal probability")
plot(S,I*I^b,type="l", ylab = "Dispersal probability")
S
S = 1-R-I
plot(S,I*I^b,type="l", ylab = "Dispersal probability")
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.01
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.1
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.5
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 1.25
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 5
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
plot(I,S*I^b,type="l", ylab = "Dispersal probability")
Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.55#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.45#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
16*16
install.packages(pkg=c("ggplot2","plyr","reshape2","gridExtra","hexbin",                 "glmmML","lme4","MCMCglmm","chron",                 "R2jags","coda","MCMCpack",                 "gdata","gtools","gplots","ellipse","plotrix",                 "car","bbmle","rgl","scatterplot3d",                 "abind","aod","arm","beanplot","blme",                 "brglm","rms","Hmisc","optimx","minqa",                 "directlabels","effects","emdbook","R2admb",                 "glmmADMB","influence.ME",                       "mlmRev","multcomp","MuMIn","AICcmodavg",                       "knitr","pscl","RColorBrewer","RLRsim","sos",                       "tweedie"),                dependencies=TRUE,                 repos=c("http://probability.ca/cran",                         "http://r-forge.r-project.org"))install.packages("coefplot2",                 repos="http://www.math.mcmaster.ca/bolker/R",                 type="source")
? ?rbeta
?rbeta
Paramètres:#
# c: taux de colonisation#
# e: taux d'extinction#
# l: pourcentage de dispersion locale#
# N: nombre de patches en X#
# p0: distribution de départ (0: absence, 1: présence, dimension NxN)#
# nstep: nombre de pas de temps#
# D: matrice de destruction d'habitat (0: inhabitable, 1: habitable, dimension NxN)#
#
###########################
#
Levins_local = function(c,e,l,N,p0,nstep,D) {#
	# Initialisation de la la métapopulation#
	metpop = p0	#
	# Matrice dans laquelle on enregistre l'abondnace régionale#
	# au fil du temps#
	res = matrix(nr=nstep,nc=2)#
	# boucle sur les pas de temps#
	for(t in 1:nstep) {#
		# boucle sur les N patches#
		for(n in 1:N^2) {#
			# On choisi une patche au hasard à mettre à jour#
     		x0 = ceiling(runif(1,0,1)*N)#
      		y0 = ceiling(runif(1,0,1)*N)#
			# On vérifie si la patche est habitable#
			if(D[x0,y0] == 1) {#
				# Si la patche est occupée, on teste s'il y a extinction#
				if(metpop[x0,y0] == 1) {#
					# On tire un nombre au hasard entre 0 et 1#
					rand = runif(1,0,1)#
					# On teste si ce nombre est inférieur à la probabilité d'extinction#
					if(rand < e) metpop[x0,y0] = 0#
					}#
				# Si la patche est vide, on teste s'il y a colonisation#
				else {#
					# On tire un nombre au hasard entre 0 et 1#
					rand = runif(1,0,1)#
					# On calcul l'abondance régionale#
					pr = sum(metpop)/N^2		#
					# On calcul l'abondance dans le voisinage#
					# On tient compte de la forme de torus de la lattice#
					# On crée d'abord un compteur du nombre de voisins occupés#
			        pl = 0#
			        # Ensuite on calcul la densité sur les 8 voisins#
			        for(x in -1:1) {#
	    		      for(y in -1:1) {#
	        		    # Si on dépasse les marges de la lattice, on rejoint les bordures#
	            		if(x0 + x < 1) x1 = N#
	            		else if(x0 + x > N) x1 = 1#
	            		else x1 = x0 + x#
	  		            if(y0 + y < 1) y1 = N#
    	        		else if(y0 + y > N) y1 = 1#
    	        		else y1 = y0 + y#
#
   		         		if(x1 != 0 & y1!= 0)#
    	              		if(D[x1,y1]==1 & metpop[x1,y1] == 1) pl = pl+1#
    	        		}#
    	    		}#
					# On calcul le taux de colonisation moyen#
					col = l*c*pl/8 + (1-l)*c*pr#
					# On test s'il y a colonisation#
					if(rand < col) metpop[x0,y0] = 1#
				}	#
			}								#
		}#
		# À chaque pas de temps, on enregistre l'abondance#
		res[t,1] = t#
		res[t,2] = sum(metpop)/N^2				#
		}#
	return(list(res,metpop))#
	}#
# Exemple#
c = 0.5#
e = 0.35#
l = 0.1#
N = 25#
p0 = matrix(0,nr=N,nc=N)#
p0[matrix(runif(N^2,0,1),nr=N,nc=N)<0.1]=1#
D = matrix(1,nr=N,nc=N)#
#
# Illustration de l'abondance régionale au fil du temps#
s0 = Levins_local(c=c,e=e,l=0,N=N,p0=p0,nstep=250,D=D)#
s1 = Levins_local(c=c,e=e,l=0.9,N=N,p0=p0,nstep=250,D=D)#
quartz()#
par(mar=c(5,6,2,1))#
plot(s0[[1]][,1],s0[[1]][,2],type="l",xlab = "Temps", ylab = "Abondance régionale",cex.axis = 1.5,cex.lab=2)#
lines(s1[[1]][,1],s1[[1]][,2],col="red")#
#
# Illustration de la distribution spatiale au terme de la simulation#
quartz()#
par(mar=c(5,6,2,1))#
image(c(1:N),c(1:N),s0[[2]],cex.axis = 1.5, cex.lab = 2,col=gray(c(0,1)),xlab = "X", ylab = "Y", main = "Dispersion globale")#
#
quartz()#
par(mar=c(5,6,2,1))#
image(c(1:N),c(1:N),s1[[2]],cex.axis = 1.5, cex.lab = 2,col=gray(c(0,1)),xlab = "X", ylab = "Y", main = "Dispersion locale")
setwd("/Users/DGravel/Desktop/package_TTIB")#
#
##############################################
##
##
# 1. Créer un metaweb régional#
##
##
###############################################
source("get_pars_Niche.R")#
#
# Charger les données utilisées dans le ms sur la calibration du modèle de niche#
MW_Med = read.table("MW_Med.txt")#
BS_Med = as.matrix(read.table("BS_Med.txt"))#
#
# Calcul des paramètres du modèle de niche#
pairs_all = matrix(nr = sum(MW_Med), nc = 2)#
#
S = nrow(MW_Med)#
n  = 1#
for(i in 1:S) for(j in 1:S) if(MW_Med[i,j]==1) {#
	pairs_all[n,1] = BS_Med[i]#
	pairs_all[n,2] = BS_Med[j]#
	n = n+1#
	}#
#
# reg_Niche calcul les paramètres de la régression quantile#
pars_quant = reg_Niche(log(pairs_all[,1],10),log(pairs_all[,2],10))#
#
# get_pars_Niche calcul les trois paramètres du modèle de niche pour les tailles données (on peut changer les valeurs de Body Size en gardant les mêmes paramètres de régression)#
pars = get_pars_Niche(pars_quant,BS_Med)#
#
# Reconstruction d'une matrice L pour des tailles données#
L = Lpred_fn(pars[,1],pars[,2],pars[,3],pars[,4],min(BS_Med))
source("vecL.R")#
#
# Compile the code#
system("R CMD SHLIB TTIB_p.cpp")#
#
# Load the function#
dyn.load("TTIB_p.so")#
#
# Set parameters#
S = nrow(L)#
eq_p = numeric(S)#
alpha = 0.2#
c = 0.1#
e = c/alpha#
par = c(c,e,S)#
#
# Run the simulations#
res_sim = .C("TTIB_p", as.double(par), as.integer(vec.L(L)),as.double(eq_p))[[3]]/100000
p_sim = p
p_sim = res_sim
library(rootSolve)#
#
# Main function#
TTIB = function(p){#
	beta = mean(log(1-p))	#
	pg = numeric(length(G))#
	pg = alpha*(1-exp(beta*G))/(1 + (alpha*(1-exp(beta*G)))*(1+G*exp(beta*G)))-p#
	pg[G==0] = c/(c+e) - p[G==0]#
	return(pg)#
	}#
#
# Parameters#
alpha = 0.025#
c = 0.1#
e = c/alpha#
#
# Diet of all species#
G = apply(L,2,sum) #
#
# Dum vector for initial conditions#
Start = numeric(length(G)) + 0.5#
#
# Find the solution #
p = multiroot(TTIB,Start)[[1]]#
#
# Plot the body size- occupancy relationship#
quartz(width = 5.5, height = 4.5)#
par(mar = c(5,6,2,1))#
plot(BS_Med,p,log = "x", pch = 19, xlab = "Body Size", ylab = "Occupancy", cex.axis = 1.25, cex.lab = 1.5)#
# Note that
quartz(width = 5.5, height = 4.5)#
par(mar = c(5,6,2,1))#
plot(p,p,log = "x", pch = 19, xlab = "Body Size", ylab = "Occupancy", cex.axis = 1.25, cex.lab = 1.5)
abline(0,1)
plot(p,p,log = "xy", pch = 19, xlab = "Body Size", ylab = "Occupancy", cex.axis = 1.25, cex.lab = 1.5)
abline(0,1)
plot(p,p_sim,log = "xy", pch = 19, xlab = "Body Size", ylab = "Occupancy", cex.axis = 1.25, cex.lab = 1.5)
plot(p,p_sim,log = "xy", pch = 19, xlab = "Occupancy analytical", ylab = "Occupancy simulations", cex.axis = 1.25, cex.lab = 1.5)
plot(BS_Med,p_sim,log = "x", pch = 19, xlab = "Body Size", ylab = "Occupancy", cex.axis = 1.25, cex.lab = 1.5)
plot(BS_Med,p_sim,log = "x", pch = 19, xlab = "Body Size", ylab = "Occupancy", cex.axis = 1.25, cex.lab = 1.5,ylim=c(0,0.04))
hist(apply(L,2,sum))
hist(apply(L,1,sum))
getwd()
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
attach(read.table("par.txt"))#
par  = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")
# Compute equilibrium for two initial conditions#
Tgrad = seq(-1,5,0.05)#
reslow = matrix(nr = length(Tgrad), nc = 4)#
reshigh = matrix(nr = length(Tgrad), nc = 4)#
#
res_M = matrix(nr = length(Tgrad), nc = 4)#
#
for(j in 1:length(Tgrad)) {#
	p0 = get_eq(p = c(1,0.0,0,0),ENV = Tgrad[j],par)#
	p0[2] = 0.001#
	p0[1] = p0[1]-0.001#
#	reslow[j,] 	= get_eq(p = p0,ENV = Tgrad[j],par)#
	p0 = get_eq(p = c(0,1,0,0),ENV = Tgrad[j],par)#
	p0[1] = 0.001#
	p0[2] = p0[1]-0.001#
	reshigh[j,] = get_eq(p = p0,ENV = Tgrad[j],par)#
#	res_M[j,] = get_eq(p = c(0,1,0,0),ENV = Tgrad[j],par)#
}
# Run climate warming with the SDM model#
# Load data#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
data = as.data.frame(read.table("data_categorical.txt"))#
data$E = data$av_annual_mean_tp#
data$E2 = data$E^2#
#
# Climate change simulation with the SDM#
library(nnet)#
SDM = multinom(t1 ~ E + E2, data)#
res_SDM = matrix(nr = 10, nc = 4)#
for(i in 1:10) res_SDM[i,] = predict(SDM,new=data.frame(E=Ecc[i],E2=Ecc[i]^2),"probs")#
p0 = predict(SDM,new=data.frame(E=ENV0,E2=ENV0^2),"probs")#
res_SDM = rbind(p0,res_SDM)#
#
# Run the transition model without climate change#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_noCC = matrix(nr= 10, nc = 4)#
p = p0#
for(i in 1:10) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[1],par)#
	p = p%*%mat#
	res_noCC[i,] = p#
}#
res_noCC = rbind(p0,res_noCC)
ENV0 = 2#
Ecc = ENV0 + 2*c(1:10)/10#
#
# Run climate warming with the SDM model#
# Load data#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
data = as.data.frame(read.table("data_categorical.txt"))#
data$E = data$av_annual_mean_tp#
data$E2 = data$E^2#
#
# Climate change simulation with the SDM#
library(nnet)#
SDM = multinom(t1 ~ E + E2, data)#
res_SDM = matrix(nr = 10, nc = 4)#
for(i in 1:10) res_SDM[i,] = predict(SDM,new=data.frame(E=Ecc[i],E2=Ecc[i]^2),"probs")#
p0 = predict(SDM,new=data.frame(E=ENV0,E2=ENV0^2),"probs")#
res_SDM = rbind(p0,res_SDM)#
#
# Run the transition model without climate change#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_noCC = matrix(nr= 10, nc = 4)#
p = p0#
for(i in 1:10) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[1],par)#
	p = p%*%mat#
	res_noCC[i,] = p#
}#
res_noCC = rbind(p0,res_noCC)
# Run climate warming with the transition model#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_CC = matrix(nr= 10, nc = 4)#
p = p0#
for(i in 1:10) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[i],par)#
	p = p%*%mat#
	res_CC[i,] = p#
}#
res_CC = rbind(p0,res_CC)#
#
# Plot the results#
quartz(height = 6, width = 8)#
par(mar=c(5,5,2,1))#
plot(2000+c(0:10)/0.1,res_CC[,2],type = "l",lwd = 3,xlab = "Année",ylab = "Proportion du paysage",cex.lab = 1.5, cex.axis = 1.25,ylim=c(0.15,0.35),col = "darkred")#
lines(2000+c(0:10)/0.1,res_noCC[,2],lwd = 3)#
lines(2000+c(0:10)/0.1,res_SDM[,2],col = "darkred",lwd = 3,lt=3)
plot(2000+c(0:10)/0.1,res_CC[,2],type = "l",lwd = 3,xlab = "Année",ylab = "Proportion du paysage",cex.lab = 1.5, cex.axis = 1.25,ylim=c(0,0.35),col = "darkred")
lines(2000+c(0:10)/0.1,res_noCC[,2],lwd = 3)
lines(2000+c(0:10)/0.1,res_SDM[,2],col = "darkred",lwd = 3,lt=3)
Ecc
Ecc = ENV0 + 4*c(1:10)/10
Ecc
Ecc = ENV0 + 4*c(1:10)/10
Ecc = c(Ecc,numeric(90)+Ecc[10])
Ecc
ENV0 = 2#
Ecc = ENV0 + 4*c(1:10)/10#
Ecc = c(Ecc,numeric(90)+Ecc[10])#
#
# Run climate warming with the SDM model#
# Load data#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
data = as.data.frame(read.table("data_categorical.txt"))#
data$E = data$av_annual_mean_tp#
data$E2 = data$E^2#
#
# Climate change simulation with the SDM#
library(nnet)#
SDM = multinom(t1 ~ E + E2, data)#
res_SDM = matrix(nr = 10, nc = 4)#
for(i in 1:10) res_SDM[i,] = predict(SDM,new=data.frame(E=Ecc[i],E2=Ecc[i]^2),"probs")#
p0 = predict(SDM,new=data.frame(E=ENV0,E2=ENV0^2),"probs")#
res_SDM = rbind(p0,res_SDM)#
#
# Run the transition model without climate change#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_noCC = matrix(nr= 10, nc = 4)#
p = p0#
for(i in 1:10) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[1],par)#
	p = p%*%mat#
	res_noCC[i,] = p#
}#
res_noCC = rbind(p0,res_noCC)#
# Run climate warming with the transition model#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_CC = matrix(nr= 100, nc = 4)#
p = p0#
for(i in 1:100) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[i],par)#
	p = p%*%mat#
	res_CC[i,] = p#
}#
res_CC = rbind(p0,res_CC)#
#
# Plot the results#
quartz(height = 6, width = 8)#
par(mar=c(5,5,2,1))#
plot(2000+c(0:100)/0.1,res_CC[,2],type = "l",lwd = 3,xlab = "Année",ylab = "Proportion du paysage",cex.lab = 1.5, cex.axis = 1.25,ylim=c(0,0.35),col = "darkred")#
lines(2000+c(0:10)/0.1,res_noCC[,2],lwd = 3)#
lines(2000+c(0:10)/0.1,res_SDM[,2],col = "darkred",lwd = 3,lt=3)
res_SDM
Ecc
res_CC
ENV0 = 1#
Ecc = ENV0 + 4*c(1:10)/10#
Ecc = c(Ecc,numeric(90)+Ecc[10])#
#
# Run climate warming with the SDM model#
# Load data#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
data = as.data.frame(read.table("data_categorical.txt"))#
data$E = data$av_annual_mean_tp#
data$E2 = data$E^2#
#
# Climate change simulation with the SDM#
library(nnet)#
SDM = multinom(t1 ~ E + E2, data)#
res_SDM = matrix(nr = 10, nc = 4)#
for(i in 1:10) res_SDM[i,] = predict(SDM,new=data.frame(E=Ecc[i],E2=Ecc[i]^2),"probs")#
p0 = predict(SDM,new=data.frame(E=ENV0,E2=ENV0^2),"probs")#
res_SDM = rbind(p0,res_SDM)#
#
# Run the transition model without climate change#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_noCC = matrix(nr= 10, nc = 4)#
p = p0#
for(i in 1:10) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[1],par)#
	p = p%*%mat#
	res_noCC[i,] = p#
}#
res_noCC = rbind(p0,res_noCC)#
# Run climate warming with the transition model#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_CC = matrix(nr= 100, nc = 4)#
p = p0#
for(i in 1:100) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[i],par)#
	p = p%*%mat#
	res_CC[i,] = p#
}#
res_CC = rbind(p0,res_CC)#
#
# Plot the results#
quartz(height = 6, width = 8)#
par(mar=c(5,5,2,1))#
plot(2000+c(0:100)/0.1,res_CC[,2],type = "l",lwd = 3,xlab = "Année",ylab = "Proportion du paysage",cex.lab = 1.5, cex.axis = 1.25,ylim=c(0,0.35),col = "darkred")#
lines(2000+c(0:10)/0.1,res_noCC[,2],lwd = 3)#
lines(2000+c(0:10)/0.1,res_SDM[,2],col = "darkred",lwd = 3,lt=3)
lines(2000+c(0:100)/0.1,res_noCC[,2],lwd = 3)
lines(2000+c(0:100)/0.1,res_SDM[,2],col = "darkred",lwd = 3,lt=3)
# Climate change simulation with the SDM#
library(nnet)#
SDM = multinom(t1 ~ E + E2, data)#
res_SDM = matrix(nr = 10, nc = 4)#
for(i in 1:100) res_SDM[i,] = predict(SDM,new=data.frame(E=Ecc[i],E2=Ecc[i]^2),"probs")#
p0 = predict(SDM,new=data.frame(E=ENV0,E2=ENV0^2),"probs")#
res_SDM = rbind(p0,res_SDM)#
#
# Run the transition model without climate change#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_noCC = matrix(nr= 10, nc = 4)#
p = p0#
for(i in 1:100) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[1],par)#
	p = p%*%mat#
	res_noCC[i,] = p#
}#
res_noCC = rbind(p0,res_noCC)#
# Run climate warming with the transition model#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_CC = matrix(nr= 100, nc = 4)#
p = p0#
for(i in 1:100) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[i],par)#
	p = p%*%mat#
	res_CC[i,] = p#
}#
res_CC = rbind(p0,res_CC)#
#
# Plot the results#
quartz(height = 6, width = 8)#
par(mar=c(5,5,2,1))#
plot(2000+c(0:100)/0.1,res_CC[,2],type = "l",lwd = 3,xlab = "Année",ylab = "Proportion du paysage",cex.lab = 1.5, cex.axis = 1.25,ylim=c(0,0.35),col = "darkred")#
lines(2000+c(0:100)/0.1,res_noCC[,2],lwd = 3)#
lines(2000+c(0:100)/0.1,res_SDM[,2],col = "darkred",lwd = 3,lt=3)
res_SDM
# Climate change simulation with the SDM#
library(nnet)#
SDM = multinom(t1 ~ E + E2, data)#
res_SDM = matrix(nr = 100, nc = 4)#
for(i in 1:100) res_SDM[i,] = predict(SDM,new=data.frame(E=Ecc[i],E2=Ecc[i]^2),"probs")#
p0 = predict(SDM,new=data.frame(E=ENV0,E2=ENV0^2),"probs")#
res_SDM = rbind(p0,res_SDM)#
#
# Run the transition model without climate change#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_noCC = matrix(nr= 100, nc = 4)#
p = p0#
for(i in 1:100) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[1],par)#
	p = p%*%mat#
	res_noCC[i,] = p#
}#
res_noCC = rbind(p0,res_noCC)#
# Run climate warming with the transition model#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/data")#
par = read.table("par.txt")#
#
setwd("/Users/DGravel/Documents/Projects_On_Going/Maple_migration/transition_maple/analyses/scripts")#
source("get_transitions.R")#
#
res_CC = matrix(nr= 100, nc = 4)#
p = p0#
for(i in 1:100) {#
	mat = get_matrix(EC = p[1],ED = p[2],EM = p[3],ENV=Ecc[i],par)#
	p = p%*%mat#
	res_CC[i,] = p#
}#
res_CC = rbind(p0,res_CC)#
#
# Plot the results#
quartz(height = 6, width = 8)#
par(mar=c(5,5,2,1))#
plot(2000+c(0:100)/0.1,res_CC[,2],type = "l",lwd = 3,xlab = "Année",ylab = "Proportion du paysage",cex.lab = 1.5, cex.axis = 1.25,ylim=c(0,0.35),col = "darkred")#
lines(2000+c(0:100)/0.1,res_noCC[,2],lwd = 3)#
lines(2000+c(0:100)/0.1,res_SDM[,2],col = "darkred",lwd = 3,lt=3)
